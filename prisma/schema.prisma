// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  phone         String?
  firstName     String    @map("first_name")
  middleName    String?   @map("middle_name")
  lastName      String    @map("last_name")
  fullName      String    @map("full_name")
  passwordHash  String    @map("password_hash")
  isVerified    Boolean   @default(false) @map("is_verified")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  createdArenas Arena[]   @relation("ArenaCreator")
  verifications UserVerification[]
  followers     Follow[]  @relation("Following")
  following     Follow[]  @relation("Followers")
  sentChats     Chat[]
  chatLikes     ChatLike[]
  chatComments  ChatComment[]
  arenaComments Comment[]
  arenaViews    ArenaView[]
  paymentMethods PaymentMethod[]
  sentPayments   Payment[]    @relation("Payer")
  receivedPayments Payment[]  @relation("Receiver")

  @@map("users")
}

model Guest {
  id          String      @id @default(uuid())
  ipAddress   String      @map("ip_address")
  userAgent   String      @map("user_agent")
  createdAt   DateTime    @default(now()) @map("created_at")
  sessionId   String      @unique @map("session_id")
  arenaViews  ArenaView[]

  @@map("guests")
}

model UserVerification {
  id          String    @id @default(uuid())
  userId      String    @map("user_id")
  provider    String    // 'twitter' or 'linkedin'
  verifiedAt  DateTime  @default(now()) @map("verified_at")

  // Relations
  user        User      @relation(fields: [userId], references: [id])

  @@map("verifications")
}

model Arena {
  id          String    @id @default(uuid())
  creatorId   String    @map("creator_id")
  title       String
  description String    @db.Text
  isPublic    Boolean   @default(true) @map("is_public")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  creator     User      @relation("ArenaCreator", fields: [creatorId], references: [id])
  invites     ArenaInvite[]
  chats       Chat[]
  comments    Comment[]
  views       ArenaView[]
  payments    Payment[]

  @@map("arenas")
}

model ArenaInvite {
  id        String   @id @default(uuid())
  arenaId   String   @map("arena_id")
  userId    String   @map("user_id")
  invitedAt DateTime @default(now()) @map("invited_at")

  // Relations
  arena     Arena    @relation(fields: [arenaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([arenaId, userId])
  @@map("arena_invites")
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String   @map("follower_id")
  followingId String   @map("following_id")
  followedAt  DateTime @default(now()) @map("followed_at")

  // Relations
  follower    User     @relation("Followers", fields: [followerId], references: [id])
  following   User     @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@map("followers")
}

model Chat {
  id        String   @id @default(uuid())
  arenaId   String   @map("arena_id")
  senderId  String   @map("sender_id")
  message   String   @db.Text
  sentAt    DateTime @default(now()) @map("sent_at")

  // Relations
  arena     Arena    @relation(fields: [arenaId], references: [id])
  sender    User     @relation(fields: [senderId], references: [id])
  likes     ChatLike[]
  comments  ChatComment[]

  @@map("chats")
}

model ChatLike {
  id        String   @id @default(uuid())
  chatId    String   @map("chat_id")
  userId    String   @map("user_id")
  likedAt   DateTime @default(now()) @map("liked_at")

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
  @@map("chat_likes")
}

model ChatComment {
  id        String   @id @default(uuid())
  chatId    String   @map("chat_id")
  userId    String   @map("user_id")
  comment   String   @db.Text
  commentedAt DateTime @default(now()) @map("commented_at")

  // Relations
  chat      Chat     @relation(fields: [chatId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@map("chat_comments")
}

model Comment {
  id          String   @id @default(uuid())
  arenaId     String   @map("arena_id")
  commenterId String   @map("commenter_id")
  comment     String   @db.Text
  commentedAt DateTime @default(now()) @map("commented_at")

  // Relations
  arena       Arena    @relation(fields: [arenaId], references: [id])
  commenter   User     @relation(fields: [commenterId], references: [id])

  @@map("comments")
}

model ArenaView {
  id        String   @id @default(uuid())
  arenaId   String   @map("arena_id")
  viewerId  String?  @map("viewer_id")
  guestId   String?  @map("guest_id")
  viewedAt  DateTime @default(now()) @map("viewed_at")
  ipAddress String   @map("ip_address")
  userAgent String   @map("user_agent")

  // Relations
  arena     Arena    @relation(fields: [arenaId], references: [id])
  viewer    User?    @relation(fields: [viewerId], references: [id])
  guest     Guest?   @relation(fields: [guestId], references: [id])

  @@map("arena_views")
}

model PaymentMethod {
  id        String    @id @default(uuid())
  userId    String    @map("user_id")
  methodType String   @map("method_type")
  details   Json      @db.JsonB
  addedAt   DateTime  @default(now()) @map("added_at")

  // Relations
  user      User      @relation(fields: [userId], references: [id])
  payments  Payment[]

  @@map("payment_methods")
}

model Payment {
  id          String   @id @default(uuid())
  payerId     String   @map("payer_id")
  receiverId  String   @map("receiver_id")
  arenaId     String   @map("arena_id")
  methodId    String   @map("method_id")
  amount      Decimal  @db.Decimal(10, 2)
  paidAt      DateTime @default(now()) @map("paid_at")

  // Relations
  payer       User         @relation("Payer", fields: [payerId], references: [id])
  receiver    User         @relation("Receiver", fields: [receiverId], references: [id])
  arena       Arena        @relation(fields: [arenaId], references: [id])
  method      PaymentMethod @relation(fields: [methodId], references: [id])

  @@map("payments")
} 